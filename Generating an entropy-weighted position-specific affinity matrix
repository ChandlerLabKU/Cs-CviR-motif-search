import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Define the position-specific affinity matrix from previous calculations
affinity_matrix = np.array([
    [0.025109, 0.945405, 0.015094, 0.014391],
    [0.008330, 0.973568, 0.006663, 0.011439],
    [0.010842, 0.014347, 0.007098, 0.967713],
    [0.009083, 0.005988, 0.979297, 0.005632],
    [0.928131, 0.019447, 0.024044, 0.028377],
    [0.004681, 0.959217, 0.011711, 0.024391],
    [0.021204, 0.950990, 0.008121, 0.019685],
    [0.023386, 0.929616, 0.021558, 0.025441],
    [0.024945, 0.013474, 0.014041, 0.947541],
    [0.021704, 0.019598, 0.012630, 0.946069],
    [0.022951, 0.027170, 0.926398, 0.023480],
    [0.010282, 0.005890, 0.957918, 0.025910],
    [0.909998, 0.019014, 0.041524, 0.029463],
    [0.930035, 0.024009, 0.023709, 0.022248],
    [0.005410, 0.973312, 0.008243, 0.013035],
    [0.962862, 0.008909, 0.014165, 0.014064],
    [0.010192, 0.009136, 0.972726, 0.007946],
    [0.017388, 0.021154, 0.022199, 0.939259],
    [0.926430, 0.024474, 0.020804, 0.028292]
])

# Calculate entropy for each position
def calculate_entropy(probabilities):
    entropy = -np.sum(probabilities * np.log2(probabilities + 1e-10))
    return entropy

entropies = np.apply_along_axis(calculate_entropy, 1, affinity_matrix)

# Weight the affinities by entropy
weighted_affinity_matrix = affinity_matrix * entropies[:, np.newaxis]

# Convert to DataFrame for readability
weighted_affinity_df = pd.DataFrame(weighted_affinity_matrix, columns=['A', 'C', 'G', 'T'])
weighted_affinity_df.index = [f'Position {i+1}' for i in range(affinity_matrix.shape[0])]

# Display the weighted affinity matrix
weighted_affinity_df
